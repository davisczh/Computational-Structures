global Colors {
  const BLUE = 24hFF0000;
  const BLACK = 24h000000;
  const GREEN = 24h0000FF;
  const DARK_GREEN = 24h200132;
  const OLIVE = 24h6029FF;
  
  const INDIGO = 24h824B00;
  const RED = 24h00FF00;
  const GRAY = 24h010101;
  
  const PLAYER_COLOR = GREEN;
  const PLAYER_PICK_COLOR = OLIVE;
  
  const TOWER_COLOR = BLUE;  
  const DISK_COLOR = INDIGO;
  const ACTIVE_DISK_COLOR = DARK_GREEN;
  const ENEMY_COLOR = RED;
}

module hanoi_display (
    input clk,  // clock
    input rst,  // reset
    input player_position[8],
  
    input enemy_positions[8][8],

   
    output led
  ) {
    
  dual_matrix led_matrix(
    #WIDTH(32), #HEIGHT(8), .clk(clk), .rst(rst)
  );
  
 .clk(clk){
  .rst(rst){ 
  
  player_display player_color(
    .player_position(player_position)
  );
  
  enemy_display enemy_color(
    .enemy_positions(enemy_positions)
 
  );
    }
   }
  always {
    led_matrix.update = 1;
    led = led_matrix.led;
    
    player_color.screen = led_matrix.screen;
    player_color.x = led_matrix.x;
    player_color.y = led_matrix.y;

    enemy_color.screen = led_matrix.screen;
    enemy_color.x = led_matrix.x;
    enemy_color.y = led_matrix.y;
    
    
    led_matrix.color = Colors.BLACK;
   
      if (enemy_color.color == Colors.ENEMY_COLOR) {
        led_matrix.color = enemy_color.color;
      } else {
        led_matrix.color = (
         player_color.color
        );
      }

    //constant treeee
   if ((led_matrix.screen == 0 && (led_matrix.y == 2 || led_matrix.y == 1 )
    && led_matrix.x != 0) ||
     (led_matrix.screen == 1 && (led_matrix.y == 5 || led_matrix.y == 6 )))
      {
     led_matrix.color = Colors.BLUE;
    }
    
   //constant ground 
    if ((led_matrix.screen == 0 && led_matrix.x == 0) || (led_matrix.screen == 1 &&led_matrix.x == 31)) {
      led_matrix.color = Colors.GRAY;
    }
  }
}










