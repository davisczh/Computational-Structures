/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module regfile_19 (
    input clk,
    input rst,
    input [15:0] asel,
    input aconst,
    input [15:0] bsel,
    input bconst,
    input [3:0] wsel,
    input we,
    input [15:0] wd,
    output reg [15:0] aout,
    output reg [15:0] bout,
    output reg [7:0] dump_state,
    output reg [7:0] dump_collisions,
    output reg [7:0] dump_branch,
    output reg [7:0] dump_pos,
    output reg [7:0] dump_score
  );
  
  
  
  reg [7:0] M_player_pos_d, M_player_pos_q = 8'h61;
  reg [7:0] M_state_dff_d, M_state_dff_q = 8'h00;
  reg [7:0] M_branch_positions_d, M_branch_positions_q = 8'h00;
  reg [7:0] M_collision_d, M_collision_q = 1'h0;
  reg [7:0] M_score_d, M_score_q = 8'h00;
  
  wire [152-1:0] M_rom_out;
  rom_ish_2 rom (
    .state(M_state_dff_q),
    .out(M_rom_out)
  );
  
  always @* begin
    M_score_d = M_score_q;
    M_collision_d = M_collision_q;
    M_branch_positions_d = M_branch_positions_q;
    M_state_dff_d = M_state_dff_q;
    M_player_pos_d = M_player_pos_q;
    
    dump_branch = M_branch_positions_q;
    dump_pos = M_player_pos_q;
    dump_score = M_score_q;
    M_branch_positions_d = M_rom_out[136+7-:8];
    dump_collisions = M_collision_q;
    aout = 1'h0;
    if (aconst) begin
      aout = asel;
    end else begin
      
      case (asel)
        1'h0: begin
          aout = M_player_pos_q;
        end
        2'h2: begin
          aout = M_branch_positions_q;
        end
        2'h3: begin
          aout = 1'h0;
        end
        3'h6: begin
          aout = M_state_dff_q;
        end
        1'h1: begin
          aout = M_score_q;
        end
      endcase
    end
    bout = 1'h0;
    if (bconst) begin
      bout = bsel;
    end else begin
      
      case (bsel)
        1'h0: begin
          bout = M_player_pos_q;
        end
        2'h2: begin
          bout = M_branch_positions_q;
        end
        2'h3: begin
          bout = 1'h0;
        end
        3'h6: begin
          bout = M_state_dff_q;
        end
        1'h1: begin
          bout = 1'h1;
        end
      endcase
    end
    if (we) begin
      
      case (wsel)
        1'h0: begin
          M_player_pos_d = wd;
        end
        1'h1: begin
          M_score_d = wd;
        end
        2'h3: begin
          M_collision_d = wd;
        end
        3'h6: begin
          M_state_dff_d = wd;
        end
      endcase
    end
    dump_state = M_state_dff_q;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_player_pos_q <= 8'h61;
      M_state_dff_q <= 8'h00;
      M_branch_positions_q <= 8'h00;
      M_collision_q <= 1'h0;
      M_score_q <= 8'h00;
    end else begin
      M_player_pos_q <= M_player_pos_d;
      M_state_dff_q <= M_state_dff_d;
      M_branch_positions_q <= M_branch_positions_d;
      M_collision_q <= M_collision_d;
      M_score_q <= M_score_d;
    end
  end
  
endmodule
