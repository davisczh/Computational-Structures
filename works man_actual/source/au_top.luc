module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output outled,           // to LED strip, Br pin C49, connect LED Strip to 5V for power
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4], 
         // Digit select on IO Shield
    input io_button[5],// 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst; 
  sig state[8];  
  sig pmove_final[8];   
  sig reset_final;
  sig left[8];
  sig right[8];    
  sig dump_state[8];        // reset signal
 // sig trigger;
  hanoi_display display(.clk(clk), .rst(rst));
  
  rom_ish rom(.state(dump_state));
 
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    button_conditioner player_move_left;
    edge_detector button_left_edge(#RISE(1), #FALL(0));
    
    button_conditioner player_move_right;
    edge_detector button_right_edge(#RISE(1), #FALL(0));
     
  .rst(rst){
    counter slowclock(#SIZE(1), #DIV(14));
      player_move player_move(.b(pmove_final));
    }
   
  }
  main main(.clk(clk),
    .rst(rst),
    .pmove(pmove_final),
    .reset_game(reset_final),
    .player_pos(player_move.res)
  );
  always {
  //ignore
    reset_cond.in = io_button[0]; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    usb_tx = usb_rx;        // loop serial port
    
    io_seg = 8hFF;
    io_sel = 4b1111;  
    led = io_dip[0][7:0];
  
     //test
    //reset_final= io_dip[0][0];
    

    //actually a reset button
    player_move_left.in = io_button[0];
    button_left_edge.in = player_move_left.out;
    
    //actually just move, no direction
    player_move_right.in = io_button[1];
    button_right_edge.in = player_move_right.out;
  
    reset_final = button_left_edge.out;
    pmove_final = button_right_edge.out;
    
    dump_state = main.dump_state;
    display.player_position = main.dump_pos;
    display.enemy_positions = rom.out;
    
    //display whatever
    io_led[0] = main.dump_collisions; //dump_state;
    io_led[1] = main.dump_pos;
    io_led[2][0] = reset_cond.out;
    io_led[2][1] = io_button[0];
    io_led[2][2] = reset_final;
    outled = display.led;
  }
}
